// HospitalScheduler.tsx

'use client'; // Required for Next.js App Router for client-side functionality

import React, { useState } from 'react';
// Import necessary functions from date-fns
import { isBefore, isAfter, isEqual, isSameDay, format, parseISO } from 'date-fns';

// 1. TypeScript Interface for a single schedule entry (Duty Slot)
interface DutySlot {
  id: string;
  doctor: string;
  start: Date;
  end: Date;
}

// 2. Conflict Detection Logic (Pure Function)
/**
 * Checks if a new schedule slot conflicts with any existing schedules for the same doctor on the same day.
 * @param newSlot The schedule slot to check.
 * @param existingSchedules The array of current schedules.
 * @returns true if a conflict is found, false otherwise.
 */
const checkConflict = (
  newSlot: DutySlot,
  existingSchedules: DutySlot[]
): boolean => {
  // 1. Filter only schedules for the SAME DOCTOR and on the SAME DAY
  const schedulesToCompare = existingSchedules.filter(
    (existing) => 
      existing.doctor === newSlot.doctor && 
      isSameDay(existing.start, newSlot.start) && 
      existing.id !== newSlot.id // Exclude the slot itself if editing (though we only add here)
  );

  for (const existing of schedulesToCompare) {
    const newStart = newSlot.start;
    const newEnd = newSlot.end;
    const existingStart = existing.start;
    const existingEnd = existing.end;

    // Check for core overlap: 
    // The new slot starts before the existing slot ends,
    // AND the new slot ends after the existing slot starts.
    if (isBefore(newStart, existingEnd) && isAfter(newEnd, existingStart)) {
      // This simple condition covers all overlap scenarios (partial, full containment, full wrap-around).
      return true;
    }
    
    // Check for slots starting or ending at the exact same moment (e.g., end time of one is start time of another)
    // If the check above is strict (not including equality), add these edge cases:
    if (isEqual(newStart, existingEnd) || isEqual(newEnd, existingStart)) {
      // For a schedule, usually two slots can touch boundary-to-boundary without conflict.
      // E.g., 9:00-12:00 and 12:00-15:00. If an overlap is defined as anything > 0 minutes, we allow this.
      continue; 
    }
  }
  return false;
};

// 3. Initial Dummy Data
const INITIAL_SCHEDULES: DutySlot[] = [
  // Using October 2025 as a future date reference
  { id: '1', doctor: 'Dr. A. Deshmukh', start: new Date(2025, 9, 25, 10, 0), end: new Date(2025, 9, 25, 13, 0) },
  { id: '2', doctor: 'Dr. B. Kulkarni', start: new Date(2025, 9, 25, 12, 0), end: new Date(2025, 9, 25, 16, 0) }, // Different Doctor, No Conflict
  { id: '3', doctor: 'Dr. A. Deshmukh', start: new Date(2025, 9, 26, 9, 0), end: new Date(2025, 9, 26, 17, 0) },
];

// 4. Main Component (Single File Solution)
export default function HospitalScheduler() {
  const [schedules, setSchedules] = useState<DutySlot[]>(INITIAL_SCHEDULES);
  const [doctor, setDoctor] = useState('');
  const [date, setDate] = useState('');
  const [startTime, setStartTime] = useState('');
  const [endTime, setEndTime] = useState('');
  const [status, setStatus] = useState<{ type: 'success' | 'error' | ''; message: string }>({ type: '', message: '' });

  const handleFormSubmit = (e: React.FormEvent) => {
    e.preventDefault();

    // Use input values to construct full Date objects
    // We use parseISO with the combined string for robust parsing
    const newStartDate = parseISO(`${date}T${startTime}:00`);
    const newEndDate = parseISO(`${date}T${endTime}:00`);

    // Basic validation
    if (newEndDate.getTime() <= newStartDate.getTime()) {
      setStatus({ type: 'error', message: 'Error: End Time must be strictly after Start Time.' });
      return;
    }
    
    if (isNaN(newStartDate.getTime()) || isNaN(newEndDate.getTime())) {
       setStatus({ type: 'error', message: 'Error: Invalid date or time format. Please select valid Date/Time.' });
       return;
    }

    const newSlot: DutySlot = {
      id: Date.now().toString(),
      doctor,
      start: newStartDate,
      end: newEndDate,
    };

    // CORE LOGIC: Conflict Check
    if (checkConflict(newSlot, schedules)) {
      setStatus({ 
        type: 'error', 
        message: `Conflict detected! Dr. ${doctor} is already booked on ${format(newStartDate, 'MMM d')} during the specified time slot.` 
      });
      return;
    }

    // Add new schedule
    setSchedules((prev) => [...prev, newSlot]);
    setStatus({ 
      type: 'success', 
      message: `Success! Dr. ${doctor}'s slot added: ${format(newStartDate, 'MMM d, p')} to ${format(newEndDate, 'p')}.` 
    });

    // Reset form fields
    setDoctor('');
    setDate('');
    setStartTime('');
    setEndTime('');
  };

  return (
    <div className="min-h-screen bg-gray-50 p-4 md:p-8">
      <div className="max-w-4xl mx-auto bg-white shadow-xl rounded-xl p-6 md:p-10">
        <header className="mb-8 border-b pb-4">
            <h1 className="text-3xl font-extrabold text-blue-700">Hospital Duty Scheduler</h1>
            <p className="text-gray-500 mt-1">A React/Next.js challenge solution with built-in conflict detection using date-fns.</p>
        </header>

        {/* Status Message */}
        {status.message && (
          <div className={`p-4 rounded-lg mb-6 text-sm font-medium ${
            status.type === 'error' ? 'bg-red-100 text-red-700 border border-red-300' : 'bg-green-100 text-green-700 border border-green-300'
          }`}>
            {status.message}
          </div>
        )}

        {/* Schedule Addition Form */}
        <section className="mb-10">
            <h2 className="text-xl font-semibold text-gray-800 mb-4">Add New Duty Slot</h2>
            <form onSubmit={handleFormSubmit} className="grid grid-cols-1 md:grid-cols-5 gap-4">
            
            <div className="md:col-span-1">
                <label htmlFor="doctor" className="block text-sm font-medium text-gray-700">Doctor</label>
                <input
                id="doctor"
                type="text"
                value={doctor}
                onChange={(e) => setDoctor(e.target.value)}
                className="mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500"
                required
                placeholder="Dr. Name"
                />
            </div>

            <div className="md:col-span-1">
                <label htmlFor="date" className="block text-sm font-medium text-gray-700">Date</label>
                <input
                id="date"
                type="date"
                value={date}
                onChange={(e) => setDate(e.target.value)}
                className="mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500"
                required
                />
            </div>

            <div className="md:col-span-1">
                <label htmlFor="startTime" className="block text-sm font-medium text-gray-700">Start Time</label>
                <input
                id="startTime"
                type="time"
                value={startTime}
                onChange={(e) => setStartTime(e.target.value)}
                className="mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500"
                required
                />
            </div>
            
             <div className="md:col-span-1">
                <label htmlFor="endTime" className="block text-sm font-medium text-gray-700">End Time</label>
                <input
                id="endTime"
                type="time"
                value={endTime}
                onChange={(e) => setEndTime(e.target.value)}
                className="mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500"
                required
                />
            </div>

            <div className="flex items-end md:col-span-1">
                <button
                type="submit"
                className="w-full h-10 bg-blue-600 text-white font-semibold py-2 px-4 border border-transparent rounded-md shadow-sm hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition duration-150"
                >
                Save Schedule
                </button>
            </div>
            
            </form>
        </section>

        {/* Current Schedule List */}
        <section>
            <h2 className="text-xl font-semibold text-gray-800 mb-4 border-t pt-4">Current Duty Roster</h2>
            
            <div className="overflow-x-auto shadow border-b border-gray-200 sm:rounded-lg">
                <table className="min-w-full divide-y divide-gray-200">
                    <thead className="bg-gray-100">
                        <tr>
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Doctor</th>
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Date</th>
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Time Slot</th>
                        </tr>
                    </thead>
                    <tbody className="bg-white divide-y divide-gray-200">
                        {schedules
                        .sort((a, b) => a.start.getTime() - b.start.getTime()) // Sort by time for better readability
                        .map((slot) => (
                            <tr key={slot.id} className="hover:bg-gray-50">
                                <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">{slot.doctor}</td>
                                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                    {format(slot.start, 'EEE, MMM dd, yyyy')}
                                </td>
                                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                    {format(slot.start, 'h:mm a')} - {format(slot.end, 'h:mm a')}
                                </td>
                            </tr>
                        ))}
                    </tbody>
                </table>
            </div>
            {schedules.length === 0 && (
                <p className="mt-4 text-center text-gray-500 p-4 bg-gray-50 rounded-md">No schedules currently booked.</p>
            )}
        </section>
      </div>
    </div>
  );
}
